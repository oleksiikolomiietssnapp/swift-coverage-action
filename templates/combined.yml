# Combined reporting - multiple jobs, single PR comment

name: Coverage Combined

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  coverage-ios:
    uses: oleksiikolomiietssnapp/swift-coverage-action@latest
    with:
      macos-version: "15"
      xcode-version: "16.1"
      post-comment: false  # Disable individual comments
      job-name: "iOS Target"
      coverage-threshold: "80"

  coverage-macos:
    uses: oleksiikolomiietssnapp/swift-coverage-action@latest
    with:
      macos-version: "15"
      xcode-version: "16.1"
      working-directory: "./macos-package"
      post-comment: false
      job-name: "macOS Target"
      coverage-threshold: "80"

  post-combined-comment:
    if: github.event_name == 'pull_request'
    needs: [coverage-ios, coverage-macos]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const jobOutputs = [
              {
                name: "${{ needs.coverage-ios.outputs.job-name }}",
                coverage: "${{ needs.coverage-ios.outputs.coverage-percentage }}",
                table: `${{ needs.coverage-ios.outputs.coverage-table }}`
              },
              {
                name: "${{ needs.coverage-macos.outputs.job-name }}",
                coverage: "${{ needs.coverage-macos.outputs.coverage-percentage }}",
                table: `${{ needs.coverage-macos.outputs.coverage-table }}`
              }
            ];

            const sections = jobOutputs
              .filter(job => job.name && job.coverage)
              .map(job => `### ${job.name} - ${job.coverage}%\n\n${job.table}\n`);

            if (sections.length === 0) return;

            const commentMarker = '<!-- swift-coverage-combined -->';
            const comment = `## ðŸ“Š Combined Coverage\n\n${sections.join('\n')}${commentMarker}`;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const oldComments = comments.data.filter(c => c.body.includes(commentMarker));
            for (const c of oldComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: c.id,
              });
            }

            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
