name: Swift Test Coverage

on:
  workflow_call:
    inputs:
      # Basic configuration
      macos-version:
        description: 'macOS runner version (e.g., "latest", "15", "14")'
        required: false
        type: string
        default: 'latest'
      xcode-version:
        description: 'Xcode version to use (default: system default)'
        required: false
        type: string
        default: ''
      source-path-override:
        description: 'Override source path pattern (default: {PROJECT}/Sources)'
        required: false
        type: string
      project-name-override:
        description: 'Override project name (default: repository name)'
        required: false
        type: string
      coverage-comment-header:
        description: 'Header for coverage comment'
        required: false
        type: string
        default: '### 🛡️ Code Coverage Report'
      working-directory:
        description: 'Working directory for Swift commands (default: repository root)'
        required: false
        type: string
        default: '.'
      skip-label:
        description: 'Label name to skip workflow execution (default: skip-coverage)'
        required: false
        type: string
        default: 'skip-coverage'

      # Multi-job combined comments
      post-comment:
        description: 'Post coverage comment to PR (set to false when using combined comments)'
        required: false
        type: boolean
        default: true
      job-name:
        description: 'Name/description for this coverage job (used in combined reports)'
        required: false
        type: string
        default: ''

      # Coverage threshold
      coverage-threshold:
        description: 'Coverage threshold percentage (if set, enables quality indicators and Details section)'
        required: false
        type: string
        default: ''
      fail-on-low-coverage:
        description: 'Fail the job if coverage is below threshold'
        required: false
        type: boolean
        default: false

    outputs:
      coverage-percentage:
        description: 'The calculated coverage percentage'
        value: ${{ jobs.coverage.outputs.coverage }}

      # Multi-job combined comments
      coverage-table:
        description: 'The coverage table in markdown format'
        value: ${{ jobs.coverage.outputs.coverage-table }}
      job-name:
        description: 'The job name for this coverage run'
        value: ${{ inputs.job-name }}

env:
  XCODE_PATH: '/Applications/Xcode_${{ inputs.xcode-version }}.app/Contents/Developer'
  COVERAGE_SUMMARY_FILE: '${{ github.workspace }}/coverage_summary.txt'

jobs:
  coverage:
    if: ${{ !contains(github.event.pull_request.labels.*.name, inputs.skip-label) }}
    runs-on: macos-${{ inputs.macos-version }}
    outputs:
      coverage: ${{ steps.extract.outputs.coverage }}
      coverage-table: ${{ steps.extract.outputs.coverage-table }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - uses: actions/checkout@v4

    - name: List Xcode installations
      run: sudo ls -1 /Applications | grep "Xcode"


    - name: Validate Xcode version
      if: inputs.xcode-version != ''
      run: |
        REQUESTED_XCODE="Xcode_${{ inputs.xcode-version }}.app"
        if [ ! -d "/Applications/$REQUESTED_XCODE" ]; then
          echo "❌ Error: Xcode version ${{ inputs.xcode-version }} is not installed"
          echo ""
          echo "Available Xcode versions:"
          sudo ls -1 /Applications | grep "Xcode" | sed 's/Xcode_//g' | sed 's/.app//g' | sed 's/^/  - /'
          echo ""
          echo "Please update your workflow to use one of the available versions."
          exit 1
        fi
        echo "✅ Xcode ${{ inputs.xcode-version }} is available"

    - name: Select Xcode ${{ inputs.xcode-version }}
      if: inputs.xcode-version != ''
      run: sudo xcode-select -s ${{ env.XCODE_PATH }}

    - name: Verify Swift Version
      run: swift --version

    - name: Run Swift Tests with Coverage
      run: |
        swift test --enable-swift-testing --enable-code-coverage
        CODECOV_PATH=$(swift test --enable-swift-testing --enable-code-coverage --show-codecov-path)
        echo "CODECOV_PATH=$CODECOV_PATH" >> $GITHUB_ENV

    - uses: oleksiikolomiietssnapp/swift-coverage-action/workflow-steps/process-coverage.yml@latest
      env:
        COVERAGE_SUMMARY_FILE: ${{ env.COVERAGE_SUMMARY_FILE }}
      with:
        coverage-threshold: ${{ inputs.coverage-threshold }}
        project-name-override: ${{ inputs.project-name-override }}
        source-path-override: ${{ inputs.source-path-override }}

    - uses: oleksiikolomiietssnapp/swift-coverage-action/workflow-steps/post-pr-comment.yml@latest
      env:
        COVERAGE_SUMMARY_FILE: ${{ env.COVERAGE_SUMMARY_FILE }}
      with:
        coverage-comment-header: ${{ inputs.coverage-comment-header }}
        job-name: ${{ inputs.job-name }}

    - name: Check Coverage Threshold
      if: inputs.fail-on-low-coverage && inputs.coverage-threshold != ''
      run: |
        COVERAGE=${{ steps.extract.outputs.coverage }}
        THRESHOLD="${{ inputs.coverage-threshold }}"

        echo "Coverage: ${COVERAGE}%"
        echo "Threshold: ${THRESHOLD}%"

        COVERAGE_INT=$(echo "$COVERAGE" | awk '{print int($1)}')

        if [ "$COVERAGE_INT" -lt "$THRESHOLD" ]; then
          echo "::error title=Coverage Below Threshold::Coverage ${COVERAGE}% is below the required threshold of ${THRESHOLD}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi
