name: Post Combined Coverage Comment

on:
  workflow_call:
    inputs:
      jobs-json:
        description: 'JSON array of coverage jobs with name, coverage, and table'
        required: true
        type: string
      comment-header:
        description: 'Header for the coverage comment'
        required: false
        type: string
        default: '## 📊 Coverage Report'

jobs:
  post-comment:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const jobs = JSON.parse('${{ inputs.jobs-json }}');

            // Check if all tables are identical
            const firstTable = jobs[0].table;
            const allTablesIdentical = jobs.every(job => job.table === firstTable);

            let comment = '';

            if (jobs.length === 1) {
              // Single job: show simple coverage report
              comment = `
            ${{ inputs.comment-header }}

            **Configuration:** ${jobs[0].name}

            ${jobs[0].table}

            ---
            _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)_
              `;
            } else if (allTablesIdentical) {
              // Multiple jobs with identical coverage: show one table with all configs listed
              const configsList = jobs.map(j => \`**\${j.name}** (\${j.coverage}%)\`).join(', ');
              comment = `
            ${{ inputs.comment-header }}

            ${firstTable}

            > ℹ️ All configurations show identical coverage: ${configsList}

            ---
            _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)_
              `;
            } else {
              // Multiple jobs with different coverage: show summary + collapsible details
              let summaryTable = '| Configuration | Overall Coverage |\\n|--------------|:----------------:|\\n';
              let detailsSections = '';

              jobs.forEach(job => {
                summaryTable += \`| \${job.name} | **\${job.coverage}%** |\\n\`;
                detailsSections += \`
            <details>
            <summary>📋 Detailed Coverage - \${job.name}</summary>

            \${job.table}

            </details>
            \`;
              });

              comment = `
            ${{ inputs.comment-header }}

            ${summaryTable}
            ${detailsSections}
            ---
            _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)_
              `;
            }

            // Fetch existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Delete previous coverage comments
            const botComments = comments.data.filter(comment =>
              comment.body.includes("${{ inputs.comment-header }}")
            );

            for (const botComment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            // Post new comment
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
