name: Test Sample Multi-Target Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering

jobs:
  coverage-default:
    name: "Coverage (default: macOS latest, Xcode system)"
    uses: ./.github/workflows/swift-coverage.yml
    with:
      project-name-override: "SampleMultiTarget"
      working-directory: "./sample"
      post-comment: false

  coverage-macos-26:
    name: "Coverage (macOS 26, Xcode system)"
    uses: ./.github/workflows/swift-coverage.yml
    with:
      macos-version: "26"
      project-name-override: "SampleMultiTarget"
      working-directory: "./sample"
      post-comment: false

  coverage-xcode-16-3:
    name: "Coverage (macOS latest, Xcode 16.3)"
    uses: ./.github/workflows/swift-coverage.yml
    with:
      xcode-version: "16.3"
      project-name-override: "SampleMultiTarget"
      working-directory: "./sample"
      post-comment: false

  post-coverage-comment:
    name: "Post Combined Coverage Comment"
    if: github.event_name == 'pull_request'
    needs: [coverage-default, coverage-macos-26, coverage-xcode-16-3]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ### ðŸ“Š Sample Multi-Target Coverage Report

            #### macOS latest + Xcode system (Coverage: **${{ needs.coverage-default.outputs.coverage-percentage }}%**)
            ${{ needs.coverage-default.outputs.coverage-table }}

            #### macOS 26 + Xcode system (Coverage: **${{ needs.coverage-macos-26.outputs.coverage-percentage }}%**)
            ${{ needs.coverage-macos-26.outputs.coverage-table }}

            #### macOS latest + Xcode 16.3 (Coverage: **${{ needs.coverage-xcode-16-3.outputs.coverage-percentage }}%**)
            ${{ needs.coverage-xcode-16-3.outputs.coverage-table }}

            _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)._
            `;

            // Fetch existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Delete previous combined coverage comments
            const botComments = comments.data.filter(comment =>
              comment.body.includes("### ðŸ“Š Sample Multi-Target Coverage Report")
            );

            for (const botComment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            // Post new comment
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });