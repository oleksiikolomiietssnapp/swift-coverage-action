name: Swift Test Coverage

on:
  workflow_call:
    inputs:
      xcode-version:
        description: 'Xcode version to use'
        required: false
        type: string
        default: '16.2'
      source-path-override:
        description: 'Override source path pattern (default: {PROJECT}/Sources)'
        required: false
        type: string
      project-name-override:
        description: 'Override project name (default: repository name)'
        required: false
        type: string
      coverage-comment-header:
        description: 'Header for coverage comment'
        required: false
        type: string
        default: '### 🛡️ Code Coverage Report'
    outputs:
      coverage-percentage:
        description: 'The calculated coverage percentage'
        value: ${{ jobs.coverage.outputs.coverage }}

env:
  XCODE_PATH: '/Applications/Xcode_${{ inputs.xcode-version }}.app/Contents/Developer'
  COVERAGE_SUMMARY_FILE: 'coverage_summary.txt'

jobs:
  coverage:
    runs-on: macos-latest
    outputs:
      coverage: ${{ steps.extract.outputs.coverage }}

    steps:
    - uses: actions/checkout@v4

    - name: List Xcode installations
      run: sudo ls -1 /Applications | grep "Xcode"

    - name: Select Xcode ${{ inputs.xcode-version }}
      run: sudo xcode-select -s ${{ env.XCODE_PATH }}

    - name: Run Swift Tests with Coverage
      run: |
        swift test --enable-swift-testing --enable-code-coverage
        CODECOV_PATH=$(swift test --enable-swift-testing --enable-code-coverage --show-codecov-path)
        echo "CODECOV_PATH=$CODECOV_PATH" >> $GITHUB_ENV

    - name: Extract Coverage Data
      id: extract
      run: |
        # Set project name and source path
        PROJECT_NAME="${{ inputs.project-name-override }}"
        if [ -z "$PROJECT_NAME" ]; then
          PROJECT_NAME="${{ github.event.repository.name }}"
        fi

        SOURCE_PATH="${{ inputs.source-path-override }}"
        if [ -z "$SOURCE_PATH" ]; then
          SOURCE_PATH="${PROJECT_NAME}/Sources"
        fi

        echo "Using PROJECT_NAME: $PROJECT_NAME"
        echo "Using SOURCE_PATH: $SOURCE_PATH"

        # Extract coverage data and iterate through all targets
        TARGET_COUNT=$(jq '.data | length' "$CODECOV_PATH")
        echo "Found $TARGET_COUNT target(s)"

        # Initialize table
        cat <<EOF > ${{ env.COVERAGE_SUMMARY_FILE }}
        |   №  | Name | Executable Lines | Coverage |
        |:----:|------|-----------------:|---------:|
        EOF

        total_coverage_sum=0
        target_counter=1

        # Loop through each target in .data[]
        for ((i=0; i<TARGET_COUNT; i++)); do
          # Get target name
          TARGET_NAME=$(jq -r --argjson index $i '.data[$index].name // "Target"' "$CODECOV_PATH")

          # Skip test targets
          if [[ "$TARGET_NAME" =~ [Tt]est ]]; then
            echo "Skipping test target: $TARGET_NAME"
            continue
          fi

          # Extract files for this target
          FILES_LINE_COUNTS=$(jq -r --arg source_path "$SOURCE_PATH" --argjson index $i '.data[$index].files[] | select(.filename | contains($source_path)) | .summary.lines' "$CODECOV_PATH")

          target_total_lines=0
          target_covered_lines=0

          # Loop through each file's line count data for this target
          for lines_data in $(echo "$FILES_LINE_COUNTS" | jq -c '.'); do
            total=$(echo "$lines_data" | jq '.count')
            covered=$(echo "$lines_data" | jq '.covered')
            target_total_lines=$((target_total_lines + total))
            target_covered_lines=$((target_covered_lines + covered))
          done

          # Calculate coverage percentage for this target
          if [ $target_total_lines -gt 0 ]; then
            target_coverage=$(echo "scale=6; $target_covered_lines * 100 / $target_total_lines" | bc)
          else
            target_coverage=0
          fi

          target_coverage_rounded=$(echo "$target_coverage" | awk '{print int($1 * 100 + 0.5) / 100}')
          target_coverage_with_percentage="${target_coverage_rounded}%"

          # Add target row to table
          echo "| $target_counter | $TARGET_NAME | $target_total_lines | **$target_coverage_with_percentage** |" >> ${{ env.COVERAGE_SUMMARY_FILE }}

          total_coverage_sum=$(echo "$total_coverage_sum + $target_coverage" | bc)
          target_counter=$((target_counter + 1))
        done

        # Calculate overall average coverage
        if [ $TARGET_COUNT -gt 0 ]; then
          average_coverage=$(echo "scale=6; $total_coverage_sum / $TARGET_COUNT" | bc)
        else
          average_coverage=0
        fi

        average_coverage_rounded=$(echo "$average_coverage" | awk '{print int($1 * 100 + 0.5) / 100}')

        # Output for next steps
        echo "coverage=$average_coverage_rounded" >> $GITHUB_OUTPUT

    - name: Comment on Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageOutput = fs.readFileSync('${{ env.COVERAGE_SUMMARY_FILE }}', 'utf8');

          const newComment = `
          ${{ inputs.coverage-comment-header }}

          ${coverageOutput}

          _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)._
          `;

          // Fetch existing comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
          });

          // Identify and delete previous bot comments
          const botComments = comments.data.filter(comment =>
            comment.body.includes("${{ inputs.coverage-comment-header }}")
          );

          for (const botComment of botComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }

          // Create a comment on the pull request
          await github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: newComment,
          });
