name: Swift Test Coverage

on:
  workflow_call:
    inputs:
      # Basic configuration
      macos-version:
        description: 'macOS runner version (e.g., "latest", "15", "14")'
        required: false
        type: string
        default: 'latest'
      xcode-version:
        description: 'Xcode version to use (default: system default)'
        required: false
        type: string
        default: ''
      source-path-override:
        description: 'Override source path pattern (default: {PROJECT}/Sources)'
        required: false
        type: string
      project-name-override:
        description: 'Override project name (default: repository name)'
        required: false
        type: string
      coverage-comment-header:
        description: 'Header for coverage comment'
        required: false
        type: string
        default: '### 🛡️ Code Coverage Report'
      working-directory:
        description: 'Working directory for Swift commands (default: repository root)'
        required: false
        type: string
        default: '.'
      skip-label:
        description: 'Label name to skip workflow execution (default: skip-coverage)'
        required: false
        type: string
        default: 'skip-coverage'

      # Multi-job combined comments
      post-comment:
        description: 'Post coverage comment to PR (set to false when using combined comments)'
        required: false
        type: boolean
        default: true
      job-name:
        description: 'Name/description for this coverage job (used in combined reports)'
        required: false
        type: string
        default: ''

      # Coverage threshold
      coverage-threshold:
        description: 'Coverage threshold percentage (if set, enables quality indicators and Details section)'
        required: false
        type: string
        default: ''
      fail-on-low-coverage:
        description: 'Fail the job if coverage is below threshold'
        required: false
        type: boolean
        default: false

    outputs:
      coverage-percentage:
        description: 'The calculated coverage percentage'
        value: ${{ jobs.coverage.outputs.coverage }}

      # Multi-job combined comments
      coverage-table:
        description: 'The coverage table in markdown format'
        value: ${{ jobs.coverage.outputs.coverage-table }}
      job-name:
        description: 'The job name for this coverage run'
        value: ${{ inputs.job-name }}

env:
  XCODE_PATH: '/Applications/Xcode_${{ inputs.xcode-version }}.app/Contents/Developer'
  COVERAGE_SUMMARY_FILE: '${{ github.workspace }}/coverage_summary.txt'

jobs:
  coverage:
    if: ${{ !contains(github.event.pull_request.labels.*.name, inputs.skip-label) }}
    runs-on: macos-${{ inputs.macos-version }}
    outputs:
      coverage: ${{ steps.extract.outputs.coverage }}
      coverage-table: ${{ steps.extract.outputs.coverage-table }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - uses: actions/checkout@v4

    - name: List Xcode installations
      run: sudo ls -1 /Applications | grep "Xcode"

    - name: Validate Xcode version
      if: inputs.xcode-version != ''
      run: |
        REQUESTED_XCODE="Xcode_${{ inputs.xcode-version }}.app"
        if [ ! -d "/Applications/$REQUESTED_XCODE" ]; then
          echo "❌ Error: Xcode version ${{ inputs.xcode-version }} is not installed"
          echo ""
          echo "Available Xcode versions:"
          sudo ls -1 /Applications | grep "Xcode" | sed 's/Xcode_//g' | sed 's/.app//g' | sed 's/^/  - /'
          echo ""
          echo "Please update your workflow to use one of the available versions."
          exit 1
        fi
        echo "✅ Xcode ${{ inputs.xcode-version }} is available"

    - name: Select Xcode ${{ inputs.xcode-version }}
      if: inputs.xcode-version != ''
      run: sudo xcode-select -s ${{ env.XCODE_PATH }}

    - name: Verify Swift Version
      run: swift --version
      
    - name: Run Swift Build
      run: swift build

    - name: Run Swift Tests with Coverage
      run: |
        swift test --enable-swift-testing --enable-code-coverage
        CODECOV_PATH=$(swift test --enable-swift-testing --enable-code-coverage --show-codecov-path)
        echo "CODECOV_PATH=$CODECOV_PATH" >> $GITHUB_ENV

    - name: Extract Coverage Data
      id: extract
      run: |
        # Set project name and source path
        PROJECT_NAME="${{ inputs.project-name-override }}"
        if [ -z "$PROJECT_NAME" ]; then
          PROJECT_NAME="${{ github.event.repository.name }}"
        fi

        SOURCE_PATH="${{ inputs.source-path-override }}"
        if [ -z "$SOURCE_PATH" ]; then
          SOURCE_PATH="${PROJECT_NAME}/Sources"
        fi


        # Check if there are any actual source files to report on
        SOURCE_FILE_COUNT=$(jq -r '.data[0].files[] | select(.filename | test("/\\.build/") | not) | select(.filename | test("\\.swift$")) | select(.filename | test("/(Tests?|test)/") | not) | .filename' "$CODECOV_PATH" | wc -l)

        if [ "$SOURCE_FILE_COUNT" -eq 0 ]; then
          # Create a placeholder entry when no source files exist
          ALL_FILES="$PROJECT_NAME|0|0"
        else
          # Extract all Swift files excluding build artifacts
          ALL_FILES=$(jq -r '.data[0].files[] | select(.filename | test("/\\.build/") | not) | select(.filename | test("\\.swift$")) | select(.filename | test("/(Tests?|test)/") | not) | "\(.filename)|\(.summary.lines.count)|\(.summary.lines.covered)"' "$CODECOV_PATH")
        fi

        # Initialize - check if threshold is set
        THRESHOLD="${{ inputs.coverage-threshold }}"
        if [ -n "$THRESHOLD" ]; then
          show_quality="true"
        else
          show_quality="false"
        fi

        # Create temporary files for target data
        TARGETS_DATA=$(mktemp)
        TABLE_BODY=$(mktemp)

        # Parse files and group by target
        while IFS='|' read -r filename total_lines covered_lines; do
          if [ -n "$filename" ]; then
            # Extract target name from file path patterns:
            # Pattern 1: /path/to/TargetName/Sources/...
            # Pattern 2: /path/to/Sources/TargetName/...
            # Pattern 3: /path/to/TargetName/...
            target_name=""

            if echo "$filename" | grep -q '/Sources/[^/]*/'; then
              # Pattern: .../Sources/TargetName/...
              target_name=$(echo "$filename" | sed -E 's|.*/Sources/([^/]+)/.*|\1|')
            elif echo "$filename" | grep -q '/Sources/[^/]*\.swift$'; then
              # Pattern: .../Sources/file.swift (direct in Sources)
              target_name=$(echo "$filename" | sed -E 's|.*/Sources/([^/]*)\.swift$|\1|')
            else
              target_name="$PROJECT_NAME"
            fi


            # Skip if target name looks like a test
            if echo "$target_name" | grep -qi test; then
              continue
            fi

            # Write target data to temp file
            echo "$target_name|$total_lines|$covered_lines" >> "$TARGETS_DATA"
          fi
        done <<< "$ALL_FILES"

        # Aggregate data by target
        AGGREGATED_DATA=$(mktemp)
        if [ -s "$TARGETS_DATA" ]; then
          sort "$TARGETS_DATA" | awk -F'|' '
          {
            target = $1
            total_lines[target] += $2
            covered_lines[target] += $3
          }
          END {
            for (target in total_lines) {
              print target "|" total_lines[target] "|" covered_lines[target]
            }
          }' > "$AGGREGATED_DATA"
        fi

        # Generate table rows for each target
        target_counter=1
        total_coverage_sum=0
        target_count=0
        total_lines_sum=0

        if [ -s "$AGGREGATED_DATA" ]; then
          # Process each target and add to table
          while IFS='|' read -r target_name total_lines covered_lines; do
            if [ -n "$target_name" ]; then
              if [ $total_lines -gt 0 ]; then
                target_coverage=$(echo "scale=6; $covered_lines * 100 / $total_lines" | bc)
              else
                target_coverage=0
              fi

              target_coverage_rounded=$(echo "$target_coverage" | awk '{print int($1 * 100 + 0.5) / 100}')

              echo "| $target_counter | $target_name | $total_lines | **${target_coverage_rounded}%** |" >> "$TABLE_BODY"

              # For overall average calculation
              echo "$target_coverage" >> /tmp/coverage_values.txt
              total_lines_sum=$((total_lines_sum + total_lines))
              target_counter=$((target_counter + 1))

            fi
          done < <(sort "$AGGREGATED_DATA")
        else
          # Fallback: add a single entry with project name
          echo "| 1 | $PROJECT_NAME | 0 | **0%** |" >> "$TABLE_BODY"
        fi

        # Calculate overall average coverage
        if [ -f /tmp/coverage_values.txt ]; then
          target_count=$(wc -l < /tmp/coverage_values.txt)
          if [ $target_count -gt 0 ]; then
            total_coverage_sum=$(awk '{sum+=$1} END {print sum}' /tmp/coverage_values.txt)
            average_coverage=$(echo "scale=6; $total_coverage_sum / $target_count" | bc)
          else
            average_coverage=0
          fi
          rm -f /tmp/coverage_values.txt
        else
          average_coverage=0
        fi

        # Clean up temp files
        rm -f "$TARGETS_DATA" "$AGGREGATED_DATA"

        average_coverage_rounded=$(echo "$average_coverage" | awk '{print int($1 * 100 + 0.5) / 100}')

        # Determine header icon based on average coverage
        coverage_header="Coverage"
        if [ "$show_quality" = "true" ]; then
          coverage_int=$(echo "$average_coverage_rounded" | awk '{print int($1)}')
          if [ "$coverage_int" -lt "$THRESHOLD" ]; then
            coverage_header="⚠️"
          else
            coverage_header="✅"
          fi
        fi

        # Write final table with header + body
        cat <<EOF > ${{ env.COVERAGE_SUMMARY_FILE }}
        |   №  | Target | Lines | $coverage_header |
        |:----:|--------|------:|:---------:|
        EOF
        cat "$TABLE_BODY" >> ${{ env.COVERAGE_SUMMARY_FILE }}

        # Add average/combined coverage row if multiple targets
        if [ $target_count -gt 1 ]; then
          echo "| | <p align="right">**Total**</p> | $total_lines_sum | **${average_coverage_rounded}%** |" >> ${{ env.COVERAGE_SUMMARY_FILE }}
        fi

        # Clean up temp files
        rm -f "$TABLE_BODY"

        # Output for next steps
        echo "coverage=$average_coverage_rounded" >> $GITHUB_OUTPUT

        # Output table for combined comments
        echo "coverage-table<<EOF" >> $GITHUB_OUTPUT
        cat ${{ env.COVERAGE_SUMMARY_FILE }} >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Output threshold for comment footer (if set)
        if [ -n "$THRESHOLD" ]; then
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
        else
          echo "threshold=" >> $GITHUB_OUTPUT
        fi

    - name: Comment on Pull Request
      if: github.event_name == 'pull_request' && inputs.post-comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Read coverage output from file
          const coverageOutput = fs.readFileSync('${{ env.COVERAGE_SUMMARY_FILE }}', 'utf8');

          // Create unique identifier using GitHub's job context
          const workflowName = '${{ github.workflow }}';
          const jobName = '${{ github.job }}';
          const customJobName = '${{ inputs.job-name }}';
          const jobId = customJobName || `${workflowName}:${jobName}`;
          const commentMarker = `<!-- swift-coverage-id: ${jobId} -->`;

          // Build threshold details if threshold provided
          const thresholdStr = '${{ steps.extract.outputs.threshold }}';
          const threshold = thresholdStr ? parseInt(thresholdStr, 10) : null;
          let thresholdSection = '';
          if (threshold !== null && threshold !== undefined) {
            thresholdSection = `
          <details>
          <summary><b>Details</b></summary>

          ### Threshold - ${threshold}%
            - ⚠️ below
            - ✅ meets

          </details>
          `;
          }

          const header = '${{ inputs.coverage-comment-header }}';
          const newComment = `
          ${header}

          ${coverageOutput}
          ${thresholdSection}
          _Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)._
          ${commentMarker}
          `;

          // Fetch existing comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
          });

          // Identify and delete ONLY previous comments with the same job ID
          const botComments = comments.data.filter(comment =>
            comment.body.includes(commentMarker)
          );

          for (const botComment of botComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }

          // Create a comment on the pull request
          await github.rest.issues.createComment({
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: newComment,
          });

          console.log(`✅ Coverage comment posted successfully (ID: ${jobId})`);

    - name: Check Coverage Threshold
      if: inputs.fail-on-low-coverage && inputs.coverage-threshold != ''
      run: |
        COVERAGE=${{ steps.extract.outputs.coverage }}
        THRESHOLD="${{ inputs.coverage-threshold }}"

        echo "Coverage: ${COVERAGE}%"
        echo "Threshold: ${THRESHOLD}%"

        COVERAGE_INT=$(echo "$COVERAGE" | awk '{print int($1)}')

        if [ "$COVERAGE_INT" -lt "$THRESHOLD" ]; then
          echo "::error title=Coverage Below Threshold::Coverage ${COVERAGE}% is below the required threshold of ${THRESHOLD}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi
