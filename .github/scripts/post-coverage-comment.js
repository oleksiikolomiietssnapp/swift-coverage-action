// Post individual coverage comment to PR
// This script posts a single coverage report for one job/configuration

module.exports = async ({github, context, fs, coverageFile, header, jobId, threshold}) => {
  // Read coverage output from file
  const coverageOutput = fs.readFileSync(coverageFile, 'utf8');

  // Create unique identifier using GitHub's job context
  // Format: workflow_name:job_name or use custom job-name if provided
  const commentMarker = `<!-- swift-coverage-id: ${jobId} -->`;

  // Build threshold details if threshold provided
  let thresholdSection = '';
  if (threshold !== null && threshold !== undefined) {
    thresholdSection = `
<details>
<summary><b>Details</b></summary>

### Threshold - ${threshold}%
  - ⚠️ below
  - ✅ meets

</details>
`;
  }

  const newComment = `
${header}

${coverageOutput}
${thresholdSection}
_Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)._
${commentMarker}
`;

  // Fetch existing comments
  const comments = await github.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.payload.pull_request.number,
  });

  // Identify and delete ONLY previous comments with the same job ID
  const botComments = comments.data.filter(comment =>
    comment.body.includes(commentMarker)
  );

  for (const botComment of botComments) {
    await github.rest.issues.deleteComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      comment_id: botComment.id,
    });
  }

  // Create a comment on the pull request
  await github.rest.issues.createComment({
    issue_number: context.payload.pull_request.number,
    owner: context.repo.owner,
    repo: context.repo.repo,
    body: newComment,
  });

  console.log(`✅ Coverage comment posted successfully (ID: ${jobId})`);
};
