// Post combined coverage comment to PR
// This script aggregates coverage results from multiple jobs and posts a single comment

module.exports = async ({github, context, jobOutputs}) => {
  // Build coverage sections from job outputs
  const sections = [];

  jobOutputs.forEach(job => {
    if (job.name && job.coverage) {
      sections.push({
        name: job.name,
        coverage: job.coverage,
        table: job.table
      });
    }
  });

  if (sections.length === 0) {
    console.log('No coverage data found');
    return;
  }

  // Build comment
  let comment = '## ðŸ“Š Sample Coverage Report\n\n';

  sections.forEach(section => {
    comment += `### ${section.name} - ${section.coverage}%\n\n`;
    comment += section.table + '\n\n';
  });

  comment += '---\n_Generated by [Swift Coverage Action](https://github.com/oleksiikolomiietssnapp/swift-coverage-action)_';

  // Add unique marker for this combined comment
  const commentMarker = '<!-- swift-coverage-combined-id: sample-multi-config -->';
  comment += `\n${commentMarker}`;

  // Fetch existing comments
  const comments = await github.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.payload.pull_request.number,
  });

  // Delete only previous combined comments with the same marker
  const botComments = comments.data.filter(c => c.body.includes(commentMarker));
  for (const c of botComments) {
    await github.rest.issues.deleteComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      comment_id: c.id,
    });
  }

  // Post new comment
  await github.rest.issues.createComment({
    issue_number: context.payload.pull_request.number,
    owner: context.repo.owner,
    repo: context.repo.repo,
    body: comment,
  });

  console.log('âœ… Combined coverage comment posted successfully');
};
